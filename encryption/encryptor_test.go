package encryption_test

import (
	"strings"
	"testing"

	"github.com/hashicorp/terraform-provider-scaffolding/encryption"
)

// Testing data.
const (
	publicKey  = `LS0tLS1CRUdJTiBQR1AgUFVCTElDIEtFWSBCTE9DSy0tLS0tCgptUUdOQkdLcEREc0JEQUM4aVFYeVppRUxoTWt5SENzbTJJNURXSHdQSnZ3MGh3NmZyNnVWMWJmd0U4aVpIYzQ3Ckp4aGhHdmpaNHhkSUk4ZzRYL2F5NFpkdjFFbjBjbXVMMjQ4eXRSQVBvWUJGVEpGRVF2TDFYMEdqQXFLb0oyaXQKZDhaQm1DVWxGcWlVcTFXMG5DeDJlUDM5ZXdhd2kyN2pwMGhZMUhIMUhVZEV6ZHBjY3g4dUFNY211dUtlTDg5Zwo1WHJXdWI2S1oyanIrTDk0aUJEZmNTd3ljQlBxWVJMZUZVZjNsN0VydkdwUlNpdmNrWlVySVhhUldIclVmZmo3CnJyVkZwMHZwUUNXKzJST1FpckRDZFc1YU9WYVNCTkRmS2xRNVphRW5ZWlA2WnVxZkJCWHdOSjQ4Vis5REdFVzAKcTJuN3RYMEdFclZ2N3JJSmZpK0NwelBPbDA5SXVTUmRxSGl3TjVmeWplUStnbGF5U1N6ZjlyalFLQnAydCtmbgpGQ3lWZkJwNHNRRWxKczZPaXBJNjByM2ZHc2tLOHk4K3BNNEo3dHBrbEpOdFlkL0VibDVmdk9mMXcxcFR5cWNJClRrQ25RMTgwRDdkQzVkQkNJZjFDeTVqVkNBVnF3Z1dkVzM0VCsrdWtDM05Gd2lWTS9YQld5K3EvTXRCYVBldjYKU1oxWmF6NkFXcXFVeS9jQUVRRUFBYlFhUTI5eWVTQlNaV1J0YjI1a0lEeHRaVUJqYjNKNUxuSmxaRDZKQWRFRQpFd0VJQURzV0lRUThia1BYbWtkcllwb052UzkrN2g5K2pWMjdpUVVDWXFrTU93SWJBd1VMQ1FnSEFnSWlBZ1lWCkNna0lDd0lFRmdJREFRSWVCd0lYZ0FBS0NSQis3aDkralYyN2lieDZDLzBiUU1ZUGt4MzBNNmFvOTRBU0VrTGcKVk1HVlRaTXR1aW9raTdLZkM2NlY0U2Vlc1hWQmQ1R3IxVFZzbnRlZm5uVmVOTDFhci9SUkxYQ2phMXY0bVB4TgphcXZyelZhOXFoUll6b1VYd2VYVDhqU3E2ZVBZbFpLMmJMMnNXbEdxRHlZd1YvTFlhZmgySk1ncStVaEZaS0R4Cks0S0Y1akZBY2hUNkEwZWtVT0UrbFVud0w5Tk14Q3g4aHpreEZpV0JEcEl0UlNhV1FDZ2plcWhpUENVcWVpTkoKam1vWFRmblFubC9UR2RsOXJrOEhsdk4zN2ZXU0xzQjBKL1pnVHd5UUo0N2VBZlpESmR4U2dpQWhnYUxpZGtrQQp4bUw2UWlyZHZ5cDNtcU5TZG9LV255ZXhNK2ZTWDZmcHBGYjVSQUFWVXpPM2FDYkZQMkFKcGVRb0dMdnVFRDhnCkpyUVlwSmxDMXNGRWM4UHVLVUk1VHI4UUtHOXZDanUyQWtBYzNDSEgyOFlkRitnZkR1Qy9UWXd0Rit5eVRmOW0KQ3FJYVBGL1EvM2lINVAwdUJCV3FhNkpZQzRoZGJ5SXQ4S2U2OFNDdmtkbXNOZURuKzBYL0twYzMxbUJKRDlsSgpMTCtaWllJT1RENjVTZWoydWUrSHNsT1ZnNHl5VGpWQS9ZdUpVd2J5NmRXNUFZMEVZcWtNT3dFTUFLNFY1RzJKCjdqL1RPK3NUclBqWXNoWlhPQmd6VmtqZFhRWURIbG4rMkFnUWhyem43Z0NnOHRzbmh5M1JjYkxQWmwwOEN3Z1YKeXdUUG05NVB0dmtXU0poSmhSWVRNcXlaYm5mWGJGN3M0Ly9YN05zN2dKbFhic1JGTkQ0Qno3dXd1QkxEYUxWcwpnT0FRa3pBK3VYam9ITjYrVnFHcGorS2x6c1liSHRDSjVuclZxUVdFNFhLTWZGVVhheFJLb1p1VzV4THVtRGVPCmpqU3liOENkOU5EcG1OdzRIV1R0ZVA2UFV2NFRaczhYRFhIcHZDdHFNK0hGUEIrUzNrMHdnY0RSbWduUWtNeisKb0hLdExyRitSOWYvNVV4NGIxaUVBMTlhdStlODBmckNrbVpjNW1ZNWx1VnpBR3JnRktRNEgzenZ1ckVueGg1dgpNK0g0OEhXMTJaNnkzUmpvVFh6R2lSUnY1NnFQZWlJKzV0U3h3VDdLR2tGMERaYzFtVVU4T3hHMFQzR2l4Um5KCk1jU244S0xVcTJVb1dUeHNscEVzQmV6enB6a1VrOFdsME5zNTBUZ2E0S3NuejNpM3ZMMURWeWNtT2tlTzZFR0UKN3FILy9BV0ZMUXk4MXhjc01ZSzd4UmtzTzBrSGp3UWhaT1VObGllQXdWZEFLd3BRS1R5UW4xUXUwUUFSQVFBQgppUUcyQkJnQkNBQWdGaUVFUEc1RDE1cEhhMkthRGIwdmZ1NGZmbzFkdTRrRkFtS3BERHNDR3d3QUNna1FmdTRmCmZvMWR1NG5Vb2d2OUU5NTZuZkpUR215eFpWT0RhQUxMcjY4VTJlYWE0Z0xwR0lyOGQvcDk4NjFlaEJiNXROZ0EKVlRtMnZaTDA2OUpockJ2djhIK1Y0QmhrWVpXcDJlSFNzOXAwbXh5ZGxuOWM1d25PQWNzSXYrQUVqb2tTYWY0TQpXbnpWalR5aWFQd0tIR2ZxMEVYS1h6a29lbS9TdTFEeVZnN0lRUFp3RXgydFBXY0NpZitCOHpKWUJpMjc1QzlwCi9VbVZyRG8yMkRRNTFYTDlMNEY4aU1ZL0ZNSzUxblFhbzJ6eGRIemNqMzBpUVNCNjFIdHpXa1NpT3hDWTJZN1cKOUVHSHZkaFN4bUhQUHpzTkNwbjlKRmV6RG1hSDQ3dnJBUW9oZ2dMSEZoRVB0K1AySHJTekFBc2FQK1B1SEhMSgp2UnVRdWdqMDdVRk9ncDRCc1crM0dRTzVYS2EzK0N4NWNjZ1dCbGFmbDY2ZVNqRHdRQzFVUS9FTHJsTkNFNHRzCmVyUDdhMXNZQy8zZFNGeFlLdldXZmxmOVVKM2dHT09uTzBxMGNFVTdSUitZWklyOWFoeThYUWhHZjVlT2crOVYKQ1R4YTFpS2VBdEl3SklINnBNTDMva0FlZjZBUURKK1JEZi9xYnNxeC9xUVIxZ3BMSUxpNEt1ZE0rRGd3Vy9oMAphUTRKY3hiZzF6YzQKPWVJSHcKLS0tLS1FTkQgUEdQIFBVQkxJQyBLRVkgQkxPQ0stLS0tLQo=`
	privateKey = `LS0tLS1CRUdJTiBQR1AgUFJJVkFURSBLRVkgQkxPQ0stLS0tLQoKbFFWWUJHS3BERHNCREFDOGlRWHlaaUVMaE1reUhDc20ySTVEV0h3UEp2dzBodzZmcjZ1VjFiZndFOGlaSGM0NwpKeGhoR3ZqWjR4ZElJOGc0WC9heTRaZHYxRW4wY211TDI0OHl0UkFQb1lCRlRKRkVRdkwxWDBHakFxS29KMml0CmQ4WkJtQ1VsRnFpVXExVzBuQ3gyZVAzOWV3YXdpMjdqcDBoWTFISDFIVWRFemRwY2N4OHVBTWNtdXVLZUw4OWcKNVhyV3ViNktaMmpyK0w5NGlCRGZjU3d5Y0JQcVlSTGVGVWYzbDdFcnZHcFJTaXZja1pVcklYYVJXSHJVZmZqNwpyclZGcDB2cFFDVysyUk9RaXJEQ2RXNWFPVmFTQk5EZktsUTVaYUVuWVpQNlp1cWZCQlh3Tko0OFYrOURHRVcwCnEybjd0WDBHRXJWdjdySUpmaStDcHpQT2wwOUl1U1JkcUhpd041ZnlqZVErZ2xheVNTemY5cmpRS0JwMnQrZm4KRkN5VmZCcDRzUUVsSnM2T2lwSTYwcjNmR3NrSzh5OCtwTTRKN3Rwa2xKTnRZZC9FYmw1ZnZPZjF3MXBUeXFjSQpUa0NuUTE4MEQ3ZEM1ZEJDSWYxQ3k1alZDQVZxd2dXZFczNFQrK3VrQzNORndpVk0vWEJXeStxL010QmFQZXY2ClNaMVphejZBV3FxVXkvY0FFUUVBQVFBTC9pdWI2ak02YWxSV3Y0OEdzdmlHU01uTkVzMFNjRzNaKzRqMlFsTWoKSHl1NTk4RnJBb1B1TkJacC9idXdhbmMyUjU2Nm03NmVyYitoTkFZRjNWaDVUYk1sN0hRaElDRm5aNGFKa2RjdAoxR25YTnpaNy94dDR3L1B5TkUxUzQyV1lCL2dCMDhzSGk0QnhUNGZRaUxMQnc5dEFNS2ZJd081cVN5THRRZjRMCkVnV2tYcnpHUkVxZWFmNTI4bHJqTm9LMmc5dG1aYmk1WGNiQTQrcG56OHhzMGJ1MGE3ZTVHa0o1VEpIMVhyS2UKUitXd3VLQ2tEczV3aDk5M3BmaHE3UkFxOTVUZEJyRmJHMS8waXRENFpOSHVkZnVMdTFRQWoyTnlDQURRN0twdwpDN3J4d2pmanpvUVNHSVNwVk1zOHUrOTAybzJ4cjZwSElGZGpOa2o0QkU5blNydFBrVW5XSU1yeTRNSmJPM2UwCmtkRkEvOEhxaTJ6OVcrZE1aYWVkT3BQa29PR25jY1lxUWxXT1NqWnpubG1DQXFtTnVDU3lTRHhXYXdGL3FMV2cKWVBBMU5XTGg0dVE4dG9ESFZjV1FKTkpaVkJtVVNaSk1ZMTNVZ1NmcnJaVG1yejFCcmZzTndZUUJwa1hPSkNKcAo2dDltL0trS3l3NjNyRG1zK2ZNeEhjRTFFUVlBMU12MEZIL29pTXYvMDU3ZjFrbjEvY0VFREVQWDk2UFh0R3dRCnVpWFFpQjNsbnEvM0wrTmpIT1c5NitOeFZKZ0dUZWJGd2pPU1VWa1NIMVdzNXlreStEM0dnTUpITmV5WnBxaEgKS0pJdDNxamZlMENDb3doQWtxOTgyNzkvWGFNWDZuMEtlYjd6Rnc3Zm9qanBSbFYzaW9YMVBvSzA3ODM1c1ZNcgpMSEQ5Sy9HVmlBRFRGSmlockIzeXhFMVgwUFZBTjJ4U09VUFZ1a3dGV0lvNWxES0NKUjJwSmtTYVNLQkxiZUxFClRoeFo5MlFxakl1OVNKVjN2ODZOV0NPU2lQOUpCZ0RpMEJhUTZtcEtSczRZMkU3c3I2cGhHc3V2dzJEOGVRT1IKYlovTGJ4eHE1R29jUm83dUptYnFJUGZyYmtFTUFoU1VPT2RZaTZKMXhQbGpjWFk1RlY0WUlRNFFlMDFPUERSOAo1T2dxaUR3RGIwNGVFR2lyQi9qVm5xWDBrMDNxVVFVL2c5OHIyMzlEVU40ek5xZCtlZXo1WGEvVHpZYWhadjBZCkN3ajFvMks3UW9BdUVlaUU0ZWVqN0paYWUzUis0OWF6aThBYVp0cU94WXJESnhxQXdRVjFiakJ4WXJwYnpUam8KVmJJRkNZVnhoOUhjNTNZV0ovSk9iTUVZb0hUNU1UOEYrUUVDNGdtUjBJKy9MczJkTitQYjg3ZDRaMCtoclFFdQpTbEhPSmZQMU9OTHNITWVpY3psZ0ZxWk0vMmVpRmNSWWtUUzdwM24yR1V3eURNOVBqR2d1NWpqMndkYnpJam1tCkEwdzV4YUlxYWVkTytmaVowYUJqOFg3SjByWFBrWGhpU01kZGYyNXJyK3R3aXZrZnFlR2lIUXBLeHNaYmFvWW8KS0lKZXhTMUxOUi93SXB2eUpEUlI3OWhRNWcvWElqYTZEUi9jVkEyYVlDU2pKV1ROV1NFVkZmV3FKU0N4b1lVVworMHhyYVZ0Ylc0dzV0T3hZTXpZb05CNzh3SzdJSEpZZmdlcWJ0QnBEYjNKNUlGSmxaRzF2Ym1RZ1BHMWxRR052CmNua3VjbVZrUG9rQjBRUVRBUWdBT3hZaEJEeHVROWVhUjJ0aW1nMjlMMzd1SDM2TlhidUpCUUppcVF3N0Foc0QKQlFzSkNBY0NBaUlDQmhVS0NRZ0xBZ1FXQWdNQkFoNEhBaGVBQUFvSkVIN3VIMzZOWGJ1SnZIb0wvUnRBeGcrVApIZlF6cHFqM2dCSVNRdUJVd1pWTmt5MjZLaVNMc3A4THJwWGhKNTZ4ZFVGM2thdlZOV3llMTUrZWRWNDB2VnF2CjlGRXRjS05yVy9pWS9FMXFxK3ZOVnIycUZGak9oUmZCNWRQeU5LcnA0OWlWa3Jac3ZheGFVYW9QSmpCWDh0aHAKK0hZa3lDcjVTRVZrb1BFcmdvWG1NVUJ5RlBvRFI2UlE0VDZWU2ZBdjAwekVMSHlIT1RFV0pZRU9raTFGSnBaQQpLQ042cUdJOEpTcDZJMG1PYWhkTitkQ2VYOU1aMlgydVR3ZVc4M2Z0OVpJdXdIUW45bUJQREpBbmp0NEI5a01sCjNGS0NJQ0dCb3VKMlNRREdZdnBDS3QyL0tuZWFvMUoyZ3BhZko3RXo1OUpmcCtta1Z2bEVBQlZUTTdkb0pzVS8KWUFtbDVDZ1l1KzRRUHlBbXRCaWttVUxXd1VSencrNHBRamxPdnhBb2IyOEtPN1lDUUJ6Y0ljZmJ4aDBYNkI4Two0TDlOakMwWDdMSk4vMllLb2hvOFg5RC9lSWZrL1M0RUZhcHJvbGdMaUYxdklpM3dwN3J4SUsrUjJhdzE0T2Y3ClJmOHFsemZXWUVrUDJVa3N2NWxsZ2c1TVBybEo2UGE1NzRleVU1V0RqTEpPTlVEOWk0bFRCdkxwMVowRldBUmkKcVF3N0FRd0FyaFhrYlludVA5TTc2eE9zK05peUZsYzRHRE5XU04xZEJnTWVXZjdZQ0JDR3ZPZnVBS0R5MnllSApMZEZ4c3M5bVhUd0xDQlhMQk0rYjNrKzIrUlpJbUVtRkZoTXlySmx1ZDlkc1h1emovOWZzMnp1QW1WZHV4RVUwClBnSFB1N0M0RXNOb3RXeUE0QkNUTUQ2NWVPZ2MzcjVXb2FtUDRxWE94aHNlMElubWV0V3BCWVRoY294OFZSZHIKRkVxaG01Ym5FdTZZTjQ2T05MSnZ3SjMwME9tWTNEZ2RaTzE0L285Uy9oTm16eGNOY2VtOEsyb3o0Y1U4SDVMZQpUVENCd05HYUNkQ1F6UDZnY3EwdXNYNUgxLy9sVEhodldJUURYMXE3NTd6UitzS1NabHptWmptVzVYTUFhdUFVCnBEZ2ZmTys2c1NmR0htOHo0Zmp3ZGJYWm5yTGRHT2hOZk1hSkZHL25xbzk2SWo3bTFMSEJQc29hUVhRTmx6V1oKUlR3N0ViUlBjYUxGR2NreHhLZndvdFNyWlNoWlBHeVdrU3dGN1BPbk9SU1R4YVhRMnpuUk9CcmdxeWZQZUxlOAp2VU5YSnlZNlI0N29RWVR1b2YvOEJZVXRETHpYRnl3eGdydkZHU3c3U1FlUEJDRms1UTJXSjREQlYwQXJDbEFwClBKQ2ZWQzdSQUJFQkFBRUFDLzBSUmZGU01CMHdmbzVqc3lKVzE3T0Y5WFlHcXJOZFMvK2lyTlVLWTNlK2h4dEQKYTdUcElZOHZVU0wvMkJnU3dMTDh2Y3d2YTNBblJFMUlOL3NsQ0lIQUFJMkF4UHRpZGwvb2FycmhTVnFQSkhibgpRdVp0OEtlNE9GQ29kV2dPRE1rYTdZSTZmQzltYkNhYW95S21uVXRlQzU5UGI2SnIvLzArR1d0TGtGOUs0Vi9oCndROVluUmxxSFFaK0x6Q05YbUlEdGlKcTRzMTM2NXVjamwvQUNlbWxzaml5YnNDeWEzaTE1cWx0RTNHOVU0NmMKOVM3OE1DU1kwbXNWMkNJTHhwQTdDMDBzQml3ZmFwdkNWOGd6bndRSURjTDM0czNTbTREamhRT3gxcWZzdTUwdgpqbmFYSmJsR0lqV0VFRDRjQjd3Y0QwcGRuZkNZa0kreERyZFB2ZkNvdTRiTHVsUjI5aW1MYnRFQmQzZTdSSEsxCktlYXczYnRQS2pSSEpOTVRMN3JuK3JBZndmNjJJUzdJTHptSndLcGtsOGVUb1drTTF2RmEwMmdFN1J6SU0waWMKTjBiL0dEV21UVzJpSHI1KzA3N21McXl6NHlnWEIvaG5tYlFSbU4rYkhXdzdKK1N2ZVpkVU8vNTN2RjluQ1hCdQpqcmhNWXppNFlzcG5SVXdEUWJVR0FNcmVtRmRBVzl3d3ZHaUJJUjhhaWNtTTlheE9lUldqY2MvZWd0OFdFTnZiCkU0TWJHRFBONTJORWtiZithZHVTK2szdHJ6MTl3N2lHZUhYN2h5SlREZVFEZjVlWWtqeGRtTU8ra1NpbnR6M28KTW5FbFJkc3ZVWXAxcDkrT2FEdGU4MlB2cmNhY1ZjK0tTVTVpb3pyZDZoaHN6SXh0ZS9RSmZWZVREM3JXSnUyUApWM29OOGJDYVUwVCtWVmFQdUZUMzdEN2o2amhNMlpUaFRodmdSUllRRWZURk9GazRFV2MzTWg3UGJmM1lhVWJZCkt0eHBzc3Y4TVlRVSsrQ1R6WU9YaFFZQTI2MTR2TW54MEM0OExQOGpPT2wzSlIwM1FNMTQvVDJmZGpVcWZlbWkKVkQ4b1I0ZjB0SEtGMjdQNUJCSitBS09QSXZQclBqR2IvM21HYzcremV2VDZmcWIwd3RYOUs3a3kxcDhodG5XYgphSm9Gb1k2cjF3ZitKSkVkOVRYbWNTcGJOVzJRTDhuaEtMT3R0bk9qSU5NWUl4akZjZzlPRi9udXdtS1c2UGQrCjl6TkIxSDZqdGxScFpMNStwK2plOEZQR01wSjloRkdCUnJaNWtmZXJxMmZXcnVBMmhoempqOXFIZVZzVzhuZzQKRDZ4aFp2bnVJVTVOOXVIVWZsdVdPQzNkQmYwZVNtS3FVNW5zVlZVeGpiRU0zeGVnakdvUTlOSHpaU0lVZ2lNdwo3RlVOMjlEUHpFSitJWE44MFFscE9ENll6WGVZT24yRVJMZ3VkMzZyc1JPZTNwWGcvSEgvd2htYmJBbkVjTlJCCkw1WmRIc1Y1NW9SaDA4NGtkMy9iclh3WENDMlZHTGg2dmVYTlgzYkZLb29PMVYvWEh2YlJUalNLWXVNb3ZnMWgKZGlsKy8wZStOOTFvSUU5dnBFblZlWDFRV25lU2t2V3Bjb3Z1Wko5Q2pWeEQ4UTV0QVVDUTRBdWMvT1M2YzZqQwpNTGI2V1JKMy8wVTkwSGtsMkVTMFVzcUZxbUhqVDRrQnRnUVlBUWdBSUJZaEJEeHVROWVhUjJ0aW1nMjlMMzd1CkgzNk5YYnVKQlFKaXFRdzdBaHNNQUFvSkVIN3VIMzZOWGJ1SjFLSUwvUlBlZXAzeVV4cHNzV1ZUZzJnQ3k2K3YKRk5ubW11SUM2UmlLL0hmNmZmT3RYb1FXK2JUWUFGVTV0cjJTOU92U1lhd2I3L0IvbGVBWVpHR1ZxZG5oMHJQYQpkSnNjblpaL1hPY0p6Z0hMQ0wvZ0JJNkpFbW4rREZwODFZMDhvbWo4Q2h4bjZ0QkZ5bDg1S0hwdjBydFE4bFlPCnlFRDJjQk1kclQxbkFvbi9nZk15V0FZdHUrUXZhZjFKbGF3Nk50ZzBPZFZ5L1MrQmZJakdQeFRDdWRaMEdxTnMKOFhSODNJOTlJa0VnZXRSN2MxcEVvanNRbU5tTzF2UkJoNzNZVXNaaHp6ODdEUXFaL1NSWHN3NW1oK083NndFSwpJWUlDeHhZUkQ3Zmo5aDYwc3dBTEdqL2o3aHh5eWIwYmtMb0k5TzFCVG9LZUFiRnZ0eGtEdVZ5bXQvZ3NlWEhJCkZnWlduNWV1bmtvdzhFQXRWRVB4QzY1VFFoT0xiSHF6KzJ0YkdBdjkzVWhjV0NyMWxuNVgvVkNkNEJqanB6dEsKdEhCRk8wVWZtR1NLL1dvY3ZGMElSbitYam9QdlZRazhXdFlpbmdMU01DU0IrcVRDOS81QUhuK2dFQXlma1EzLwo2bTdLc2Y2a0VkWUtTeUM0dUNyblRQZzRNRnY0ZEdrT0NYTVc0TmMzT0E9PQo9VEE5UgotLS0tLUVORCBQR1AgUFJJVkFURSBLRVkgQkxPQ0stLS0tLQo=`

	stringToEncryptHash = "96e957c074864b28d43f90234a2ae1cca3ea776cc13fa24ecb247ae9c06b7716"
	stringToEncrypt     = "Hello World! This is a really good test. I promise ❤️"
)

func TestNew(t *testing.T) {
	_, err := encryption.New(publicKey, privateKey)
	if err != nil {
		t.Errorf("Expected error = nil, got error = %q", err)
		err = nil
	}

	_, err = encryption.New("", "")
	if err == nil {
		t.Errorf("Expected error = %q, got error = nil", encryption.ErrNoKeys)
		err = nil
	}

	_, err = encryption.New("asdasdasd", "")
	if !strings.HasSuffix(err.Error(), "illegal base64 data at input byte 8") {
		t.Errorf("Expected error = \"illegal base64 data at input byte 8\", got error = %q", err)
		err = nil
	}

	_, err = encryption.New("YXNkYXNkYXNkYXNkCg==", "")
	if !strings.HasSuffix(err.Error(), "openpgp: invalid argument: no armored data found") {
		t.Errorf("Expected error = \"openpgp: invalid argument: no armored data found\", got error = %q", err)
		err = nil
	}
}

func TestEncryptionAndDecryption(t *testing.T) {
	enc, err := encryption.New(publicKey, privateKey)
	if err != nil {
		t.Fatalf("Got error creating client: %q", err)
	}

	// Encrypt the string
	encStr, err := enc.EncryptString(stringToEncrypt)
	if err != nil {
		t.Errorf("Expected error = nil, got error = %q", err)
		return
	}

	t.Errorf(encStr)

	// Decrypt the string
	decStr, hash, err := enc.DecryptString(encStr)
	if err != nil {
		t.Errorf("Expected error = nil, got error = %q", err)
		return
	}

	// Check output = input.
	if decStr != stringToEncrypt {
		t.Errorf("Expected encrypted string = %q, got encrypted string = %q", stringToEncrypt, decStr)
	}
	if hash != stringToEncryptHash {
		t.Errorf("Expected hash = %q, got hash = %q", stringToEncryptHash, hash)
	}
}
